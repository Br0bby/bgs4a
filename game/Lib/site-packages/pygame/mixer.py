from browser import window

class Mixer(object):
    def __init__(self):
        self.song = None
        self.music = Music()
        self.channels = []

    def init(self, frequency=22050, size=-16, channels=2, buffer=4096):
        return None

    def pre_init(self, frequency=22050, size=-16, channels=2, buffer=4096):
        return None

    def quit(self):
        return None

    def get_init(self):
        return (22050, 4096, 2)

    def stop(self):
        for channel in self.channels:
            channel.stop()
        return None

    def pause(self):
        for channel in self.channels:
            channel.pause()
        return None

    def unpause(self):
        for channel in self.channels:
            channel.unpause()
        return None

    def fadeout(self):
        for channel in self.channels:
            channel.fadeout()
        return None

    def set_num_channels(self, count):
        return None

    def get_num_channels(self):
        return len(self.channels)

    def set_reserved(self, count):
        return None

    def find_channel(self, force=False):
        return None

    def get_busy(self):
        for channel in self.channels:
            if channel.get_busy():
                return True
        return False

    def Sound(self, filename):
        return Sound(filename)

    def Channel(self, id=1):
        channel = Channel(id)
        self.channels.append(channel)
        return channel

class Sound(object):
    def __init__(self, filename):
        self.snd = window.load_sound(filename)

    def get_sound(self):
        return self.snd

    def play(self, loops=0, maxtime=0, fade_ms=0):
        self.snd.play()
        return None

    def stop(self):
        self.snd.stop()
        return None

    def fadein(self, time=1000):
        try:
            self.snd.play().fadeIn(time)
            return None
        except:
            return None

    def fadeout(self, time=1000):
        try:
            self.snd.fadeOut(time)
            return None
        except:
            return None

    def fadewith(self, snd, time=1000):
        self.snd.fadeWith(snd.get_sound(), time)
        return None

    def set_volume(self, value):
        self.snd.setVolume(value * 100)
        return None

    def get_volume(self):
        return self.snd.getVolume() / 100.0

    def get_num_channels(self):
        return 1

    def get_length(self):
        return self.snd.getDuration()

    def get_raw(self):
        return None

class Channel(object):
    def __init__(self, id=1):
        self.id = id
        self.type = None
        self.sound = None
        self.is_paused = False

    def play(self, Sound, loops=0, maxtime=0, fade_ms=0):
        self.stop()
        self.sound = Sound
        self.sound.play()
        return None

    def stop(self):
        if self.sound != None:
            self.sound.stop()
        return None

    def _toggle(self):
        if self.is_paused:
            if self.sound.isPaused():
                self.sound.togglePlay()
        else:
            if not self.sound.isPaused():
                self.sound.togglePlay()
        return None

    def pause(self):
        self._toggle()
        self.is_paused = True
        return None

    def unpause(self):
        self._toggle()
        self.is_paused = False
        return None

    def fadein(self, time=1000):
        try:
            self.sound.play().fadeIn(time)
            return None
        except:
            return None

    def fadeout(self, time=1000):
        try:
            self.sound.fadeOut(time)
            return None
        except:
            return None

    def set_volume(self, value):
        self.sound.setVolume(value * 100)
        return None

    def get_volume(self):
        try:
            return self.sound.getVolume() / 100.0
        except:
            return 0

    def get_busy(self):
        try:
            return not self.sound.isEnded()
        except:
            pass

    def queue(self, Sound):
        return None

    def get_queue(self):
        return self.sound

    def set_endevent(self, type=None):
        self.type = type
        return None

    def get_endevent(self):
        if not self.get_busy():
            return self.type
        return None

class Music(object):
    def __init__(self):
        self.type = None
        self.music = None
        self.is_paused = False

    def load(self, filename, loop=True, duration=500):
        music = window.load_sound(filename, loop)
        if music == None: music = window.load_sound(filename, loop)
        if music == None: return music
        if music == self.music:
            self.music = music
            music.fadeIn(duration)
            return music
        try:
            self.music.fadeWith(music, duration)
            self.music = music
            return self.music
        except:
            self.music = music
            music.fadeIn(duration)
            return music

    def play(self, loops=0, start=0.0):
        return None

    def rewind(self):
        try:
            self.music.stop()
            self.music.play()
        except:
            pass
        return None

    def stop(self):
        if self.music != None:
            self.music.stop()
        return None

    def _toggle(self):
        if self.is_paused:
            if self.music.isPaused():
                self.music.togglePlay()
        else:
            if not self.music.isPaused():
                self.music.togglePlay()
        return None

    def pause(self):
        self._toggle()
        self.is_paused = True
        return None

    def unpause(self):
        self._toggle()
        self.is_paused = False
        return None

    def fadein(self, time=1000):
        try:
            self.music.play().fadeIn(time)
            return None
        except:
            return None

    def fadeout(self, time=1000):
        try:
            self.music.fadeOut(time)
            return None
        except:
            return None

    def set_volume(self, value):
        self.music.setVolume(value * 100)
        return None

    def get_volume(self):
        try:
            return self.music.getVolume() / 100.0
        except:
            return 0

    def get_busy(self):
        try:
            return not self.music.isEnded()
        except:
            return None

    def set_pos(self, pos):
        try:
            self.music.setTime(pos)
        except:
            pass
        return None

    def get_pos(self):
        try:
            return self.music.getTime()
        except:
            return None

    def queue(self, Sound):
        return None

    def get_queue(self):
        return self.music

    def set_endevent(self, type=None):
        self.type = type
        return None

    def get_endevent(self):
        if not self.get_busy():
            return self.type
        return None
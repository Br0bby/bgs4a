from browser import timer, html, document

buffer_canvas = document.getElementById("buffer")
buffer_screen = buffer_canvas.getContext('2d')

class Surface(object):
    def __init__(self, size, flags=0,
                 masks=None, screen=False,
                 ratio_x=1, ratio_y=1, canvas=None, img=None):
        self.width = size[0] * ratio_x
        self.height = size[1] * ratio_y
        self.ratio_x = ratio_x
        self.ratio_y = ratio_y
        self.size = size
        self.flags = flags
        self.masks = masks
        self.screen = screen
        self.canvas = canvas
        self.img = img
        self.img_buffer = None

    def blit(self, source, dest, area=None, special_flags=0):
        if self.screen:
            if not source.img_buffer:
                if self.ratio_x != 1 or self.ratio_y != 1:
                    buffer_canvas.width = source.img.width * self.ratio_x
                    buffer_canvas.height = source.img.height * self.ratio_y
                else:
                    buffer_canvas.width = self.canvas.width
                    buffer_canvas.height = self.canvas.height

                buffer_screen.clearRect(0, 0, buffer_canvas.width, buffer_canvas.height)
                buffer_screen.drawImage(source.img, 0, 0,
                                        buffer_canvas.width,
                                        buffer_canvas.height)

                source.img_buffer = buffer_canvas.toDataURL("image/png")
                source.img.src = source.img_buffer

            self.screen.drawImage(source.img,
                                  dest[0]* self.ratio_x,
                                  dest[1]* self.ratio_y)
        return None

    def convert(self):
        pass

    def convert_alpha(self):
        pass

    def copy(self):
        pass

    def fill(self, color="black"):
        if self.screen:
            self.screen.beginPath()
            self.screen.rect(0, 0, self.canvas.width, self.canvas.height)
            self.screen.fillStyle = color
            self.screen.fill()

    def scroll(self):
        pass

    def set_colorkey(self):
        pass

    def get_colorkey(self):
        pass

    def set_alpha(self, value, flags=0):
        return None

    def get_alpha(self):
        return 1

    def lock(self):
        pass

    def unlock(self):
        pass

    def mustlock(self):
        pass

    def get_locked(self):
        pass

    def get_locks(self):
        pass

    def get_at(self):
        pass

    def set_at(self):
        pass

    def get_at_mapped(self):
        pass

    def get_palette(self):
        pass

    def get_palette_at(self):
        pass

    def set_palette(self):
        pass

    def set_palette_at(self):
        pass

    def map_rgb(self):
        pass

    def unmap_rgb(self):
        pass

    def set_clip(self):
        pass

    def get_clip(self):
        pass

    def subsurface(self):
        pass

    def get_parent(self):
        pass

    def get_abs_parent(self):
        pass

    def get_offset(self):
        pass

    def get_abs_offset(self):
        pass

    def get_size(self):
        if self.canvas:
            return (self.width, self.height)
        else:
            return (0, 0)

    def get_width(self):
        if self.canvas:
            return self.width
        else:
            return 0

    def get_height(self):
        if self.canvas:
            return self.height
        else:
            return 0

    def get_rect(self):
        pass

    def get_bitsize(self):
        return 32

    def get_bytesize(self):
        return 4

    def get_flags(self):
        return 0

    def get_pitch(self):
        return 1

    def get_masks(self):
        return self.masks

    def set_masks(self, *args):
        return None

    def get_shifts(self):
        return (None, None, None, None)

    def set_shifts(self, *args):
        return None

    def get_losses(self):
        return (None, None, None, None)

    def get_bounding_rect(self):
        pass

    def get_view(self):
        pass

    def get_buffer(self):
        pass

    def _pixels_address(self):
        return 0